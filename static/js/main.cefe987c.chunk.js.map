{"version":3,"sources":["cardlogos/amex.svg","cardlogos/discover.svg","cardlogos/mastercard.svg","cardlogos/visa.svg","lib/generator.js","components/card/index.js","lib/formator.js","App.js","index.js"],"names":["module","exports","generateCardNumber","cardType","prefills","secondDigit","Math","floor","random","Array","fill","map","concat","generatePrefills","checkSum","cardNumber","checkOffset","length","reduce","sum","num","index","doubled_num","addCheckSum","push","logoMap","americanexpress","visa","mastercard","discover","CardWrapper","className","src","alt","formatType","slice","formator","App","useState","number","setNumber","setCardType","generateFakeCardNumber","console","log","join","useEffect","value","onChange","target","onClick","ReactDOM","render","document","getElementById"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,sICyE5B,SAASC,EAAmBC,GAEzC,IAAMC,EAvER,SAA0BD,GAExB,IACIE,EADAD,EAAW,GAGf,OAAQD,GAEN,IAAK,kBAMH,OAFAE,EAAc,CAAC,EAAG,GAAGC,KAAKC,MAAsB,EAAhBD,KAAKE,WACrCJ,EAAWK,MAAM,IAAIC,KAAK,GAAGC,KAAI,kBAAML,KAAKC,MAAsB,GAAhBD,KAAKE,aAChD,CAAE,EAAGH,GAAcO,OAAOR,GAEnC,IAAK,OAGH,OADAA,EAAWK,MAAM,IAAIC,KAAK,GAAGC,KAAI,kBAAML,KAAKC,MAAsB,GAAhBD,KAAKE,aAChD,CAAE,GAAII,OAAOR,GAEtB,IAAK,aAMH,OAFAC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAKC,MAAsB,EAAhBD,KAAKE,WACjDJ,EAAWK,MAAM,IAAIC,KAAK,GAAGC,KAAI,kBAAML,KAAKC,MAAsB,GAAhBD,KAAKE,aAChD,CAAE,EAAGH,GAAcO,OAAOR,GAEnC,IAAK,WAGH,OADAA,EAAWK,MAAM,IAAIC,KAAK,GAAGC,KAAI,kBAAML,KAAKC,MAAsB,GAAhBD,KAAKE,aAChD,CAAE,EAAG,EAAG,EAAG,GAAII,OAAOR,GAE/B,QACE,MAAO,IAqCMS,CAAiBV,GAC5BW,EA5BR,SAAqBC,GAEnB,IAMMC,GAAeD,EAAWE,OAAS,GAAK,EAa9C,OAAO,GAXIF,EAAWG,QAAO,SAACC,EAAKC,EAAKC,GACtC,IAAKA,EAAQL,GAAe,IAAM,EAAE,CAClC,IAAMM,EAAoB,EAANF,EACpBD,GAAOG,EAAc,EAAIA,EAAc,EAAIA,OAE3CH,GAAOC,EAET,OAAOD,IACN,GAGqB,GAOPI,CAAYnB,GAE7B,OADAA,EAASoB,KAAKV,GACPV,E,oECtEHqB,EAAU,CACdC,oBACAC,SACAC,eACAC,cAUaC,EAPK,SAAC,GAAD,IAAG3B,EAAH,EAAGA,SAAUY,EAAb,EAAaA,WAAb,OAClB,yBAAKgB,UAAU,QACb,yBAAKC,IAAKP,EAAQtB,GAAW8B,IAAI,mBACjC,4BCjBW,SAAClB,EAAYmB,GAC1B,MAAmB,oBAAfA,EACI,GAAN,OAAUnB,EAAWoB,MAAM,EAAE,GAA7B,YAAmCpB,EAAWoB,MAAM,EAAE,IAAtD,YAA6DpB,EAAWoB,MAAM,GAAI,KAE5E,GAAN,OAAUpB,EAAWoB,MAAM,EAAE,GAA7B,YAAmCpB,EAAWoB,MAAM,EAAE,GAAtD,YAA4DpB,EAAWoB,MAAM,EAAE,IAA/E,YAAsFpB,EAAWoB,MAAM,GAAG,KDarGC,CAASrB,EAAYZ,M,MEsBfkC,MAlCf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGmBF,mBAAS,mBAH5B,mBAGNnC,EAHM,KAGIsC,EAHJ,KAOPC,EAAyB,WAC7BC,QAAQC,IAAI,uBACZ,IAAM7B,EAAab,EAAmBC,GACtCqC,EAAUzB,EAAW8B,KAAK,MAQ5B,OALAC,qBAAU,WACRJ,MAEC,CAACvC,IAGF,iCACE,6BACE,4BAAQ4C,MAAO5C,EAAU6C,SAhBF,SAAC,GAAD,IAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA0BN,EAAYM,KAiB3D,4BAAQA,MAAM,mBAAd,oBACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,aAEF,kBAAC,EAAD,CAAa5C,SAAUA,EAAUY,WAAYwB,IAC7C,4BAAQW,QAASR,GAAjB,cC9BRS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.cefe987c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amex.3a070c47.svg\";","module.exports = __webpack_public_path__ + \"static/media/discover.67a87acb.svg\";","module.exports = __webpack_public_path__ + \"static/media/mastercard.5966f60b.svg\";","module.exports = __webpack_public_path__ + \"static/media/visa.67f273f0.svg\";","/**\n * Generates an array of \n * @param cardType the name of the card type so we can prefill it with some initial digits\n */\nfunction generatePrefills(cardType){\n\n  let prefills = []\n  let secondDigit\n\n  switch (cardType){\n\n    case 'americanexpress':\n      // the first digit of american express is 3\n      // the second digit of american express is 4 or 7\n      // the total length is 15\n      secondDigit = [4, 7][Math.floor(Math.random() * 2)]\n      prefills = Array(12).fill(0).map(() => Math.floor(Math.random() * 10))\n      return [ 3, secondDigit ].concat(prefills)\n\n    case 'visa':\n      // the first digit of a visa is 4\n      prefills = Array(14).fill(0).map(() => Math.floor(Math.random() * 10))\n      return [ 4 ].concat(prefills)\n    \n    case 'mastercard':\n      // the first digit of a mastercard is 5\n      // the second digits should be from 0 - 5\n      // the total length is 16 like normal\n      secondDigit = [0, 1, 2, 3, 4, 5][Math.floor(Math.random() * 6)]\n      prefills = Array(14).fill(0).map(() => Math.floor(Math.random() * 10))\n      return [ 5, secondDigit ].concat(prefills)\n\n    case 'discover':\n      // the first 4 digits of discover card is 'usually' 6011\n      prefills = Array(11).fill(0).map(() => Math.floor(Math.random() * 10))\n      return [ 6, 0, 1, 1 ].concat(prefills)\n\n    default:\n      return []\n  }\n}\n\n\n/**\n * From the generated prefills, calculates the last checksum digits that needs to be added\n * \n * @param cardNumber Array of integer that represents the credit card number\n */\nfunction addCheckSum(cardNumber){\n\n  let checkSum = 0\n\n  // Reason for this check offset is to figure out whther the final list is going\n  // to be even or odd which will affect calculating the check_sum.\n  // This is mainly also to avoid reversing the list back and forth which is specified\n  // on the Luhn algorithm.\n  const checkOffset = (cardNumber.length + 1) % 2\n\n  checkSum = cardNumber.reduce((sum, num, index) => {\n    if ((index + checkOffset) % 2 === 0){\n      const doubled_num = num * 2\n      sum += doubled_num > 9 ? doubled_num - 9 : doubled_num\n    } else {\n      sum += num\n    }\n    return sum\n  }, 0)\n\n  // making sure the checksum is within 10 range\n  return 10 - (checkSum % 10)\n}\n\n\nexport default function generateCardNumber(cardType) {\n\n  const prefills = generatePrefills(cardType)\n  const checkSum = addCheckSum(prefills)\n  prefills.push(checkSum)\n  return prefills\n}\n","import React from 'react';\n\nimport americanexpress from '../../cardlogos/amex.svg'\nimport discover from '../../cardlogos/discover.svg'\nimport mastercard from '../../cardlogos/mastercard.svg'\nimport visa from '../../cardlogos/visa.svg'\nimport formator from '../../lib/formator';\n\nconst logoMap = {\n  americanexpress,\n  visa,\n  mastercard,\n  discover\n};\n\nconst CardWrapper = ({ cardType, cardNumber }) => (\n  <div className=\"card\">\n    <img src={logoMap[cardType]} alt='card type logo'/>\n    <h2>{formator(cardNumber, cardType)}</h2>\n  </div>\n)\n\nexport default CardWrapper;\n","// lazy inefficient formattor\nexport default (cardNumber, formatType) => {\n  if (formatType === 'americanexpress') {\n    return `${cardNumber.slice(0,4)} ${cardNumber.slice(4,10)} ${cardNumber.slice(10, 15)}`\n  } else {\n    return `${cardNumber.slice(0,4)} ${cardNumber.slice(4,8)} ${cardNumber.slice(8,12)} ${cardNumber.slice(12,16)}`;\n  }\n}\n","import React, { useState, useEffect } from 'react';\n\nimport generateCardNumber from './lib/generator';\nimport CardWrapper from './components/card';\nimport './App.css';\n\nfunction App() {\n\n  const [number, setNumber] = useState('');\n  const [cardType, setCardType] = useState('americanexpress');\n\n  const handleCardTypeChange = ({ target: { value }}) => setCardType(value);\n  \n  const generateFakeCardNumber = () => {\n    console.log('generated a new one')\n    const cardNumber = generateCardNumber(cardType);\n    setNumber(cardNumber.join(''));\n  };\n\n  useEffect(() => {\n    generateFakeCardNumber();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cardType])\n\n  return (\n    <section>\n      <div>\n        <select value={cardType} onChange={handleCardTypeChange}>\n          <option value='americanexpress'>American Express</option>\n          <option value='visa'>Visa</option>\n          <option value='mastercard'>Mastercard</option>\n          <option value='discover'>Discover</option>\n        </select>\n        <CardWrapper cardType={cardType} cardNumber={number}/>\n        <button onClick={generateFakeCardNumber}>Refresh</button>\n      </div>\n    </section>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}